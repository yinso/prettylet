// Generated by CoffeeScript 1.8.0

/*
 * simple JSON prettifier
 */

(function() {
  var JsonTab, KeyValTab, pretty,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  pretty = require('./pretty');

  KeyValTab = (function(_super) {
    __extends(KeyValTab, _super);

    function KeyValTab(key, val) {
      KeyValTab.__super__.constructor.call(this, key, val, ':');
    }

    KeyValTab.prototype._getKey = function() {
      return JSON.stringify(this.key);
    };

    KeyValTab.prototype._oneLineDelim = function(buffer, level) {
      return buffer.pushOneLine(this.delim, ' ');
    };

    KeyValTab.prototype._multiLineDelim = function(buffer, level) {
      return buffer.push(this.delim, ' ');
    };

    return KeyValTab;

  })(pretty.KeyVal);


  /*
  class KeyValTab extends pretty.Tab
    constructor: (@key, @val, @delim = ':') ->
    depth: () ->
      if @val instanceof pretty.Tab
        @val.depth()
      else
        1
    _oneLine: (buffer, level) ->
      buffer.pushOneLine @key, @delim, ' '
      if typeof(@val) == 'string'
        buffer.pushOneLine JSON.stringify(@val)
      else
        @val.oneLine buffer, level
    multiLine: (buffer, level) ->
      buffer.push JSON.stringify(@key), @delim, ' '
      @val.multiLine buffer, level
   */

  JsonTab = (function(_super) {
    __extends(JsonTab, _super);

    JsonTab.convert = function(obj) {
      if (typeof obj === 'object') {
        if (obj === null) {
          return new pretty.Literal(obj);
        } else if (obj instanceof Array) {
          return this.convertArray(obj);
        } else {
          return this.convertObject(obj);
        }
      } else {
        return new pretty.Literal(obj);
      }
    };

    JsonTab.convertArray = function(ary) {
      var item, items;
      items = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = ary.length; _i < _len; _i++) {
          item = ary[_i];
          _results.push(this.convert(item));
        }
        return _results;
      }).call(this);
      return new this(items, 'array');
    };

    JsonTab.convertObject = function(obj) {
      var key, keyVals, val;
      keyVals = (function() {
        var _results;
        _results = [];
        for (key in obj) {
          val = obj[key];
          if (obj.hasOwnProperty(key)) {
            _results.push(this.convertKeyVal(key, val));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }).call(this);
      return new this(keyVals, 'object');
    };

    JsonTab.convertKeyVal = function(key, val) {
      return new KeyValTab(key, this.convert(val));
    };

    function JsonTab(children, type) {
      this.children = children;
      this.type = type;
      JsonTab.__super__.constructor.call(this, this.children, ',');
    }

    JsonTab.prototype.openTag = function() {
      if (this.type === 'array') {
        return '[';
      } else {
        return '{';
      }
    };

    JsonTab.prototype.closeTag = function() {
      if (this.type === 'array') {
        return ']';
      } else {
        return '}';
      }
    };

    JsonTab.prototype._oneLineOpen = function(buffer, level) {
      return buffer.push(this.openTag());
    };

    JsonTab.prototype._oneLineClose = function(buffer, level) {
      return buffer.push(' ', this.closeTag());
    };

    JsonTab.prototype.multiLine = function(buffer, level) {
      var e;
      if (this.depth() < 3) {
        try {
          return this.oneLine(buffer, level);
        } catch (_error) {
          e = _error;
          console.error('JSON.multiLine:error', e);
          return this._multiLine(buffer, level);
        }
      } else {
        return this._multiLine(buffer, level);
      }
    };

    JsonTab.prototype._multiLineOpen = function(buffer, level) {
      return buffer.push(this.openTag());
    };

    JsonTab.prototype._multiLineClose = function(buffer, level) {
      buffer.fixedTab(level);
      return buffer.push(this.closeTag());
    };

    return JsonTab;

  })(pretty.Collection);

  module.exports = {
    prettify: function(obj) {
      return pretty.prettify(obj, JsonTab);
    }
  };


  /*
  class Prettify
    constructor: () ->
      if not (this instanceof Prettify)
        return new Prettify()
    pretty: (obj, level = 0) ->
      switch typeof(obj)
        when 'undefined'
          [ pretty.tabLevel(level), 'undefined' ]
        when 'boolean'
          [ pretty.tabLevel(level), if obj then 'true' else 'false' ]
        when 'number'
          [ pretty.tabLevel(level), obj.toString() ]
        when 'string'
          [ pretty.tabLevel(level), JSON.stringify(obj) ]
        else
          if obj == null
            [ 'null' ]
          else if obj instanceof Array
            @array obj, level
          else
            @object obj, level
    object: (obj, level) ->
      keys = Object.keys(obj)
      itemList = 
        for key, i in keys
          [
            @keyVal(key, obj[key], level + 1)
            if i < keys.length - 1
              ','
            else
              ''
          ]
      pretty.coll level, '{', itemList, '}'
    keyVal: (key, val, level) ->
      pretty.keyval level, key, @pretty(val, level)
    array: (ary, level) ->
      itemList =
        for item, i in ary
          [
            @pretty(item, level + 1)
            if i < ary.length - 1
              ','
            else
              ''
          ]
      pretty.coll level, '[', itemList, ']'
  
  algo = Prettify()
  
  _prettify = (obj) ->
    algo.pretty(obj)
  
  prettify = (obj) ->
    pretty.prettify obj, _prettify
  
  module.exports =
    prettify: prettify
   */

}).call(this);
