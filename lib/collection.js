// Generated by CoffeeScript 1.8.0
(function() {
  var CollectionTab, Tab,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Tab = require('./tab');

  CollectionTab = (function(_super) {
    __extends(CollectionTab, _super);

    function CollectionTab(children, delim) {
      this.children = children;
      this.delim = delim;
    }

    CollectionTab.prototype.depth = function() {
      var child, depths;
      depths = (function() {
        var _i, _len, _ref, _results;
        _ref = this.children;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          if (child instanceof Tab) {
            _results.push(child.depth());
          } else {
            _results.push(1);
          }
        }
        return _results;
      }).call(this);
      return 1 + Math.max.apply(Math, depths);
    };

    CollectionTab.prototype._oneLine = function(buffer, level) {
      this._oneLineOpen(buffer, level);
      this._oneLineChildren(buffer, level);
      return this._oneLineClose(buffer, level);
    };

    CollectionTab.prototype._oneLineChildren = function(buffer, level) {
      var child, i, _i, _len, _ref, _results;
      _ref = this.children;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        child = _ref[i];
        this._oneLineChildTab(buffer, level + 1, i);
        child.oneLine(buffer, level + 1);
        _results.push(this._oneLineDelim(buffer, level + 1, i));
      }
      return _results;
    };

    CollectionTab.prototype._oneLineChildTab = function(buffer, level, i) {
      return buffer.push(' ');
    };

    CollectionTab.prototype._oneLineDelim = function(buffer, level, i) {
      if (i < this.children.length - 1) {
        return buffer.pushOneLine(this.delim);
      }
    };

    CollectionTab.prototype._multiLine = function(buffer, level) {
      this._multiLineOpen(buffer, level);
      this._multiLineChildren(buffer, level);
      return this._multiLineClose(buffer, level);
    };

    CollectionTab.prototype._multiLineChildren = function(buffer, level) {
      var child, i, _i, _len, _ref, _results;
      _ref = this.children;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        child = _ref[i];
        this._multiLineChildTab(buffer, level + 1, i);
        child.multiLine(buffer, level + 1);
        _results.push(this._multiLineDelim(buffer, level + 1, i));
      }
      return _results;
    };

    CollectionTab.prototype._multiLineChildTab = function(buffer, level, i) {
      return buffer.fixedTab(level + 1);
    };

    CollectionTab.prototype._multiLineDelim = function(buffer, level, i) {
      if (i < this.children.length - 1) {
        return buffer.push(this.delim);
      }
    };

    return CollectionTab;

  })(Tab);


  /*
  class CollectionTab extends Tab
    constructor: (@children = []) ->
    depth: () ->
      depths =
        for child in @children
          if child instanceof Tab
            child.depth()
          else
            1
      1 + Math.max.apply(Math, depths)
    addChild: (child) ->
      if typeof(child) == 'string'
        @children.push child
      else if child instanceof Tab
        @children.push child
      else
        throw new Error("invalid_tab_object: #{child}")
    oneLine: (buffer, level) ->
      if @children.length == 0
        @oneLineNoChildren buffer, level
      else
        @oneLineChildren buffer, level
    oneLineChildren: (buffer, level) ->
      for child in @children
        if child instanceof Tab
          child.oneLine buffer, level + 1
        else
          buffer.pushOneLine child
    oneLineNoChildren: (buffer, level) ->
    multiLine: (buffer, level) -> # the multi-level thing needs to be rethought.
      @multiLineChildren buffer, level
    multiLineChildren: (buffer, level) ->
      for child in @children
        if child instanceof Tab
          child.multiLine buffer, level + 1
        else
          buffer.fixedTab(level + 1)
          buffer.push child
      buffer
   */

  module.exports = CollectionTab;

}).call(this);
