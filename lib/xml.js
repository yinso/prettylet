// Generated by CoffeeScript 1.8.0
(function() {
  var AttrListTab, ElementTab, KeyValTab, pretty,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  pretty = require('./pretty');

  KeyValTab = (function(_super) {
    __extends(KeyValTab, _super);

    function KeyValTab(key, val, delim) {
      this.key = key;
      this.delim = delim != null ? delim : '=';
      val = new pretty.Literal(val, function(v) {
        return JSON.stringify(v);
      });
      KeyValTab.__super__.constructor.call(this, this.key, val, this.delim);
    }

    return KeyValTab;

  })(pretty.KeyVal);

  AttrListTab = (function(_super) {
    __extends(AttrListTab, _super);

    function AttrListTab(attrs) {
      var children, key, val;
      children = (function() {
        var _ref, _results;
        _ref = attrs || {};
        _results = [];
        for (key in _ref) {
          val = _ref[key];
          _results.push(new KeyValTab(key, val, '='));
        }
        return _results;
      })();
      AttrListTab.__super__.constructor.call(this, children, '');
    }

    AttrListTab.prototype._oneLineOpen = function(buffer, level) {};

    AttrListTab.prototype._oneLineClose = function(buffer, level) {};

    AttrListTab.prototype._multiLineOpen = function(buffer, level) {};

    AttrListTab.prototype._multiLineClose = function(buffer, level) {};

    AttrListTab.prototype._multiLineChildTab = function(buffer, level, i) {
      if (i === 0) {
        return buffer.push(' ');
      } else {
        return buffer.wordedTab(level);
      }
    };

    return AttrListTab;

  })(pretty.Collection);

  ElementTab = (function(_super) {
    __extends(ElementTab, _super);

    ElementTab.convert = function(obj) {
      var child, children;
      if (typeof obj === 'string') {
        return new pretty.Literal(obj);
      } else {
        children = (function() {
          var _i, _len, _ref, _results;
          _ref = obj.children || [];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            _results.push(this.convert(child));
          }
          return _results;
        }).call(this);
        return new this(obj.tag, obj.attrs || obj.attributes || {}, children);
      }
    };

    function ElementTab(tag, attrs, children) {
      this.tag = tag;
      if (attrs == null) {
        attrs = {};
      }
      this.children = children != null ? children : [];
      ElementTab.__super__.constructor.call(this, this.children, '');
      this.attrs = new AttrListTab(attrs);
    }

    ElementTab.prototype._oneLineOpen = function(buffer, level) {
      buffer.pushOneLine("<" + this.tag);
      this.attrs.oneLine(buffer, level);
      if (this.children.length > 0) {
        return buffer.pushOneLine(">");
      }
    };

    ElementTab.prototype._oneLineChildTab = function(buffer, level) {};

    ElementTab.prototype._oneLineClose = function(buffer, level) {
      if (this.children.length > 0) {
        return buffer.pushOneLine("</" + this.tag + ">");
      } else {
        return buffer.pushOneLine(" />");
      }
    };

    ElementTab.prototype._multiLineOpen = function(buffer, level) {
      if (this.attrs.length === 0) {
        return buffer.push("<" + this.tag + ">");
      } else {
        buffer.push("<" + this.tag);
        this.attrs.multiLine(buffer, level + 1);
        return buffer.push(">");
      }
    };

    ElementTab.prototype._multiLineClose = function(buffer, level) {
      buffer.fixedTab(level);
      return buffer.push("</" + this.tag + ">");
    };

    return ElementTab;

  })(pretty.Collection);

  module.exports = {
    prettify: function(obj) {
      return pretty.prettify(obj, ElementTab);
    },
    KeyVal: KeyValTab,
    Element: ElementTab
  };

}).call(this);
